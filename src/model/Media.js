/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MediaFiles', 'model/MediaType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MediaFiles'), require('./MediaType'));
  } else {
    // Browser globals (root is window)
    if (!root.SVRF) {
      root.SVRF = {};
    }
    root.SVRF.Media = factory(root.SVRF.ApiClient, root.SVRF.MediaFiles, root.SVRF.MediaType);
  }
}(this, function(ApiClient, MediaFiles, MediaType) {
  'use strict';




  /**
   * The Media model module.
   * @module model/Media
   * @version 1.4.0
   */

  /**
   * Constructs a new <code>Media</code>.
   * @alias module:model/Media
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>Media</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Media} obj Optional instance to populate.
   * @return {module:model/Media} The populated <code>Media</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('adult')) {
        obj['adult'] = ApiClient.convertToType(data['adult'], 'Boolean');
      }
      if (data.hasOwnProperty('authors')) {
        obj['authors'] = ApiClient.convertToType(data['authors'], ['String']);
      }
      if (data.hasOwnProperty('canonical')) {
        obj['canonical'] = ApiClient.convertToType(data['canonical'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('duration')) {
        obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
      }
      if (data.hasOwnProperty('embedHtml')) {
        obj['embedHtml'] = ApiClient.convertToType(data['embedHtml'], 'String');
      }
      if (data.hasOwnProperty('embedUrl')) {
        obj['embedUrl'] = ApiClient.convertToType(data['embedUrl'], 'String');
      }
      if (data.hasOwnProperty('files')) {
        obj['files'] = MediaFiles.constructFromObject(data['files']);
      }
      if (data.hasOwnProperty('height')) {
        obj['height'] = ApiClient.convertToType(data['height'], 'Number');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('site')) {
        obj['site'] = ApiClient.convertToType(data['site'], 'String');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = MediaType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('width')) {
        obj['width'] = ApiClient.convertToType(data['width'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Whether the Media is adult content
   * @member {Boolean} adult
   * @default false
   */
  exports.prototype['adult'] = false;
  /**
   * The Media's authors. This should be displayed when possible.
   * @member {Array.<String>} authors
   */
  exports.prototype['authors'] = undefined;
  /**
   * The canonical page this Media can be found at via SVRF.
   * @member {String} canonical
   */
  exports.prototype['canonical'] = undefined;
  /**
   * A description of the Media
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The duration of the Media in seconds.
   * @member {Number} duration
   */
  exports.prototype['duration'] = undefined;
  /**
   * An `<iframe>` tag that embeds a player that plays the Media.
   * @member {String} embedHtml
   */
  exports.prototype['embedHtml'] = undefined;
  /**
   * A player that can be embedded using an `<iframe>` tag to play the Media.
   * @member {String} embedUrl
   */
  exports.prototype['embedUrl'] = undefined;
  /**
   * @member {module:model/MediaFiles} files
   */
  exports.prototype['files'] = undefined;
  /**
   * The height, in pixels, of the Media's source
   * @member {Number} height
   */
  exports.prototype['height'] = undefined;
  /**
   * The unique ID of this Media
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The site that this Media came from. This should be displayed when possible.
   * @member {String} site
   */
  exports.prototype['site'] = undefined;
  /**
   * The title of the Media, suitable for displaying
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * @member {module:model/MediaType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The original page this Media is located at.
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * The width, in pixels, of the Media's source
   * @member {Number} width
   */
  exports.prototype['width'] = undefined;



  return exports;
}));


