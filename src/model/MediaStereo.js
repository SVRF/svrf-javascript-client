/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SVRF) {
      root.SVRF = {};
    }
    root.SVRF.MediaStereo = factory(root.SVRF.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The MediaStereo model module.
   * @module model/MediaStereo
   * @version 1.5.0
   */

  /**
   * Constructs a new <code>MediaStereo</code>.
   * Resized versions of the Media, matching the Media&#39;s type, in stereo. Only included if the Media is stereoscopic. Resolutions larger than the original size will not be included (the original is included as &#x60;max&#x60;).
   * @alias module:model/MediaStereo
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>MediaStereo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MediaStereo} obj Optional instance to populate.
   * @return {module:model/MediaStereo} The populated <code>MediaStereo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('848')) {
        obj['848'] = ApiClient.convertToType(data['848'], 'String');
      }
      if (data.hasOwnProperty('1440')) {
        obj['1440'] = ApiClient.convertToType(data['1440'], 'String');
      }
      if (data.hasOwnProperty('2160')) {
        obj['2160'] = ApiClient.convertToType(data['2160'], 'String');
      }
      if (data.hasOwnProperty('4096')) {
        obj['4096'] = ApiClient.convertToType(data['4096'], 'String');
      }
      if (data.hasOwnProperty('hls')) {
        obj['hls'] = ApiClient.convertToType(data['hls'], 'String');
      }
      if (data.hasOwnProperty('max')) {
        obj['max'] = ApiClient.convertToType(data['max'], 'String');
      }
    }
    return obj;
  }

  /**
   * 848px wide video with a 1.3MBps video rate, 96KBps audio rate. Only included if the Media is a `video`.
   * @member {String} 848
   */
  exports.prototype['848'] = undefined;
  /**
   * 1440px wide video with a 4.4MBps video rate, 128KBps audio rate. Only included if the Media is a `video`.
   * @member {String} 1440
   */
  exports.prototype['1440'] = undefined;
  /**
   * 2160px wide video with a 10MBps video rate, 192KBps audio rate. Only included if the Media is a `video`.
   * @member {String} 2160
   */
  exports.prototype['2160'] = undefined;
  /**
   * 4096px wide image. This image should be used on mobile devices, as larger images may cause some devices to crash. Only included if the Media is a `photo`.
   * @member {String} 4096
   */
  exports.prototype['4096'] = undefined;
  /**
   * URL for an HLS master playlist containing streams in all of the above resolutions which are no wider than the original Media. Only included if the Media is a `video`.
   * @member {String} hls
   */
  exports.prototype['hls'] = undefined;
  /**
   * The Media in its largest available size (the original size).
   * @member {String} max
   */
  exports.prototype['max'] = undefined;



  return exports;
}));


