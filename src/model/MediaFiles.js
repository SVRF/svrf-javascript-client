/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MediaImages', 'model/MediaStereo', 'model/MediaVideos'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MediaImages'), require('./MediaStereo'), require('./MediaVideos'));
  } else {
    // Browser globals (root is window)
    if (!root.SVRF) {
      root.SVRF = {};
    }
    root.SVRF.MediaFiles = factory(root.SVRF.ApiClient, root.SVRF.MediaImages, root.SVRF.MediaStereo, root.SVRF.MediaVideos);
  }
}(this, function(ApiClient, MediaImages, MediaStereo, MediaVideos) {
  'use strict';




  /**
   * The MediaFiles model module.
   * @module model/MediaFiles
   * @version 1.4.0
   */

  /**
   * Constructs a new <code>MediaFiles</code>.
   * Various sizes of images and resolutions for the Media. They will never be larger than the Media source&#39;s original resolution.
   * @alias module:model/MediaFiles
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>MediaFiles</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MediaFiles} obj Optional instance to populate.
   * @return {module:model/MediaFiles} The populated <code>MediaFiles</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('glb')) {
        obj['glb'] = ApiClient.convertToType(data['glb'], 'String');
      }
      if (data.hasOwnProperty('glb-draco')) {
        obj['glb-draco'] = ApiClient.convertToType(data['glb-draco'], 'String');
      }
      if (data.hasOwnProperty('gltf')) {
        obj['gltf'] = ApiClient.convertToType(data['gltf'], {'String': 'String'});
      }
      if (data.hasOwnProperty('images')) {
        obj['images'] = MediaImages.constructFromObject(data['images']);
      }
      if (data.hasOwnProperty('stereo')) {
        obj['stereo'] = MediaStereo.constructFromObject(data['stereo']);
      }
      if (data.hasOwnProperty('videos')) {
        obj['videos'] = MediaVideos.constructFromObject(data['videos']);
      }
    }
    return obj;
  }

  /**
   * This is the binary glTF format that should be used by clients if the Media is a 3D object. This is the preferred format to use on end-user devices.
   * @member {String} glb
   */
  exports.prototype['glb'] = undefined;
  /**
   * This is the binary glTF format, with additional DRACO compression, that should be used by clients if the Media is a 3D object. Your renderer must support the KHR_draco_mesh_compression extension to use this model.
   * @member {String} glb-draco
   */
  exports.prototype['glb-draco'] = undefined;
  /**
   * A map of file names to urls where those files are hosted. The file names are relative and their name heirarchy should be respected when saving them locally.
   * @member {Object.<String, String>} gltf
   */
  exports.prototype['gltf'] = undefined;
  /**
   * @member {module:model/MediaImages} images
   */
  exports.prototype['images'] = undefined;
  /**
   * @member {module:model/MediaStereo} stereo
   */
  exports.prototype['stereo'] = undefined;
  /**
   * @member {module:model/MediaVideos} videos
   */
  exports.prototype['videos'] = undefined;



  return exports;
}));


