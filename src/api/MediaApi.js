/*
 * SVRF API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@svrf.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/MediaType', 'model/RateLimitResponse', 'model/SearchMediaResponse', 'model/SingleMediaResponse', 'model/TrendingResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/MediaType'), require('../model/RateLimitResponse'), require('../model/SearchMediaResponse'), require('../model/SingleMediaResponse'), require('../model/TrendingResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SVRF) {
      root.SVRF = {};
    }
    root.SVRF.MediaApi = factory(root.SVRF.ApiClient, root.SVRF.ErrorResponse, root.SVRF.MediaType, root.SVRF.RateLimitResponse, root.SVRF.SearchMediaResponse, root.SVRF.SingleMediaResponse, root.SVRF.TrendingResponse);
  }
}(this, function(ApiClient, ErrorResponse, MediaType, RateLimitResponse, SearchMediaResponse, SingleMediaResponse, TrendingResponse) {
  'use strict';

  /**
   * Media service.
   * @module api/MediaApi
   * @version 1.5.0
   */

  /**
   * Constructs a new MediaApi. 
   * @alias module:api/MediaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Media by ID Endpoint
     * Fetch media by its ID.
     * @param {String} id ID of Media
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SingleMediaResponse} and HTTP response
     */
    this.getByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['XAppToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SingleMediaResponse;

      return this.apiClient.callApi(
        '/vr/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Media by ID Endpoint
     * Fetch media by its ID.
     * @param {String} id ID of Media
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SingleMediaResponse}
     */
    this.getById = function(id) {
      return this.getByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Trending Endpoint
     * The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MediaType>} opts.type The type(s) of Media to be returned (comma separated).
     * @param {module:model/String} opts.stereoscopicType Search only for Media with a particular stereoscopic type.
     * @param {module:model/String} opts.category Search only for Media with a particular category.
     * @param {Number} opts.size The number of results per page. (default to 10)
     * @param {Number} opts.minimumWidth The minimum width for video and photo Media, in pixels.
     * @param {Number} opts.pageNum Pagination control to fetch the next page of results, if applicable.
     * @param {Boolean} opts.isFaceFilter Search only for Face Filters.
     * @param {Boolean} opts.hasBlendShapes Search only for Media that has blend shapes.
     * @param {Boolean} opts.requiresBlendShapes Search only for Media that requires blend shapes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TrendingResponse} and HTTP response
     */
    this.getTrendingWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'stereoscopicType': opts['stereoscopicType'],
        'category': opts['category'],
        'size': opts['size'],
        'minimumWidth': opts['minimumWidth'],
        'pageNum': opts['pageNum'],
        'isFaceFilter': opts['isFaceFilter'],
        'hasBlendShapes': opts['hasBlendShapes'],
        'requiresBlendShapes': opts['requiresBlendShapes'],
      };
      var collectionQueryParams = {
        'type': {
          value: opts['type'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['XAppToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TrendingResponse;

      return this.apiClient.callApi(
        '/vr/trending', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Trending Endpoint
     * The SVRF Trending Endpoint provides your app or project with the hottest immersive content curated by real humans. The experiences returned mirror the [SVRF homepage](https://www.svrf.com), from timely cultural content to trending pop-culture references. The trending experiences are updated regularly to ensure users always get fresh updates of immersive content.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MediaType>} opts.type The type(s) of Media to be returned (comma separated).
     * @param {module:model/String} opts.stereoscopicType Search only for Media with a particular stereoscopic type.
     * @param {module:model/String} opts.category Search only for Media with a particular category.
     * @param {Number} opts.size The number of results per page. (default to 10)
     * @param {Number} opts.minimumWidth The minimum width for video and photo Media, in pixels.
     * @param {Number} opts.pageNum Pagination control to fetch the next page of results, if applicable.
     * @param {Boolean} opts.isFaceFilter Search only for Face Filters.
     * @param {Boolean} opts.hasBlendShapes Search only for Media that has blend shapes.
     * @param {Boolean} opts.requiresBlendShapes Search only for Media that requires blend shapes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TrendingResponse}
     */
    this.getTrending = function(opts) {
      return this.getTrendingWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Endpoint
     * The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
     * @param {String} q Url-encoded search query.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MediaType>} opts.type The type(s) of Media to be returned (comma separated).
     * @param {module:model/String} opts.stereoscopicType Search only for Media with a particular stereoscopic type.
     * @param {module:model/String} opts.category Search only for Media with a particular category.
     * @param {Number} opts.size The number of results to return per-page, from 1 to 100. (default to 10)
     * @param {Number} opts.minimumWidth The minimum width for video and photo Media, in pixels.
     * @param {Number} opts.pageNum Pagination control to fetch the next page of results, if applicable.
     * @param {Boolean} opts.isFaceFilter Search only for Face Filters.
     * @param {Boolean} opts.hasBlendShapes Search only for Media that has blend shapes.
     * @param {Boolean} opts.requiresBlendShapes Search only for Media that requires blend shapes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchMediaResponse} and HTTP response
     */
    this.searchWithHttpInfo = function(q, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling search");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'stereoscopicType': opts['stereoscopicType'],
        'category': opts['category'],
        'size': opts['size'],
        'minimumWidth': opts['minimumWidth'],
        'pageNum': opts['pageNum'],
        'isFaceFilter': opts['isFaceFilter'],
        'hasBlendShapes': opts['hasBlendShapes'],
        'requiresBlendShapes': opts['requiresBlendShapes'],
      };
      var collectionQueryParams = {
        'type': {
          value: opts['type'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['XAppToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SearchMediaResponse;

      return this.apiClient.callApi(
        '/vr/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Endpoint
     * The SVRF Search Endpoint brings the power of immersive search found on [SVRF.com](https://www.svrf.com) to your app or project. SVRF&#39;s search engine enables your users to instantly find the immersive experience they&#39;re seeking. Content is sorted by the SVRF rating system, ensuring that the highest quality content and most prevalent search results are returned. 
     * @param {String} q Url-encoded search query.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/MediaType>} opts.type The type(s) of Media to be returned (comma separated).
     * @param {module:model/String} opts.stereoscopicType Search only for Media with a particular stereoscopic type.
     * @param {module:model/String} opts.category Search only for Media with a particular category.
     * @param {Number} opts.size The number of results to return per-page, from 1 to 100. (default to 10)
     * @param {Number} opts.minimumWidth The minimum width for video and photo Media, in pixels.
     * @param {Number} opts.pageNum Pagination control to fetch the next page of results, if applicable.
     * @param {Boolean} opts.isFaceFilter Search only for Face Filters.
     * @param {Boolean} opts.hasBlendShapes Search only for Media that has blend shapes.
     * @param {Boolean} opts.requiresBlendShapes Search only for Media that requires blend shapes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SearchMediaResponse}
     */
    this.search = function(q, opts) {
      return this.searchWithHttpInfo(q, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
